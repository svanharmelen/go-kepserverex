//
// Copyright 2019, Sander van Harmelen
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package kepserverex

import (
	"fmt"
	"net/url"
)

// TagGroupService handles communication with the tag group related
// methods of the KEPServerEX API.
type TagGroupService struct {
	client *Client
}

// TagGroup represents a tag group.
type TagGroup struct {
	Name          string `json:"common.ALLTYPES_NAME"`
	Description   string `json:"common.ALLTYPES_DESCRIPTION"`
	LocalTagCount int    `json:"servermain.TAGGROUP_LOCAL_TAG_COUNT"`
	TotalTagCount int    `json:"servermain.TAGGROUP_TOTAL_TAG_COUNT"`
	AutoGenerated bool   `json:"servermain.TAGGROUP_AUTOGENERATED"`
}

// TagGroupOptions represents all tag group options.
type TagGroupOptions struct {
	Name          string `json:"common.ALLTYPES_NAME"`
	Description   string `json:"common.ALLTYPES_DESCRIPTION"`
	AutoGenerated bool   `json:"servermain.TAGGROUP_AUTOGENERATED"`
}

// ListTagGroups gets a list of tag groups.
func (s *TagGroupService) ListTagGroups(channel, device string) ([]*TagGroup, error) {
	u := fmt.Sprintf("channels/%s/devices/%s/tag_groups", url.PathEscape(channel), url.PathEscape(device))

	req, err := s.client.NewRequest("GET", u, nil)
	if err != nil {
		return nil, err
	}

	var tagGroups []*TagGroup
	if err = s.client.Do(req, &tagGroups); err != nil {
		return nil, err
	}

	return tagGroups, nil
}

// CreateTagGroup creates a new tag group.
func (s *TagGroupService) CreatetagGroup(channel, device string, options *TagGroupOptions) error {
	u := fmt.Sprintf("channels/%s/devices/%s/tag_groups", url.PathEscape(channel), url.PathEscape(device))
	req, err := s.client.NewRequest("POST", u, options)
	if err != nil {
		return err
	}
	return s.client.Do(req, nil)
}

// GetTagGroup gets a specific tag group.
func (s *TagGroupService) GetTagGroup(channel, device, name string) (*TagGroup, error) {
	u := fmt.Sprintf("channels/%s/devices/%s/tag_groups/%s",
		url.PathEscape(channel),
		url.PathEscape(device),
		url.PathEscape(name),
	)

	req, err := s.client.NewRequest("GET", u, nil)
	if err != nil {
		return nil, err
	}

	var tagGroup *TagGroup
	if err = s.client.Do(req, tagGroup); err != nil {
		return nil, err
	}

	return tagGroup, nil
}

// UpdateTagGroup updates an existing tag group.
func (s *TagGroupService) UpdateTagGroup(channel, device, name string, options *TagGroupOptions) error {
	u := fmt.Sprintf("channels/%s/devices/%s/tag_groups/%s",
		url.PathEscape(channel),
		url.PathEscape(device),
		url.PathEscape(name),
	)
	req, err := s.client.NewRequest("PUT", u, options)
	if err != nil {
		return err
	}
	return s.client.Do(req, nil)
}

// DeleteTagGroup deletes a tag group.
func (s *TagGroupService) DeleteTagGroup(channel, device, name string) error {
	u := fmt.Sprintf("channels/%s/devices/%s/tag_groups/%s",
		url.PathEscape(channel),
		url.PathEscape(device),
		url.PathEscape(name),
	)
	req, err := s.client.NewRequest("DELETE", u, nil)
	if err != nil {
		return err
	}
	return s.client.Do(req, nil)
}
